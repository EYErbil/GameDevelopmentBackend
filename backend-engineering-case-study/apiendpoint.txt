A sample Postman collection could include:

Create User:
POST http://localhost:8080/users
Body: {} (empty)
Test: Check response fields userId, level, coins, abGroup

Update Level:
POST http://localhost:8080/users/updateLevel
Body: {"userId":1, "joinedPopTheBalloonEvent":true}

Join Event:
POST http://localhost:8080/pop-balloon-event/join?userId=1

Get Suggestions and Invitations:
GET http://localhost:8080/pop-balloon-event/suggestions-and-invitations?userId=1

Invite Partner:
POST http://localhost:8080/pop-balloon-event/invite
Body: {"inviterUserId":1, "inviteeUserId":2}

Accept Invitation:
POST http://localhost:8080/pop-balloon-event/accept
Body: {"invitationId":10, "userId":2}

Reject Invitation:
POST http://localhost:8080/pop-balloon-event/reject
Body: {"invitationId":10, "userId":2}

Update Balloon:
POST http://localhost:8080/pop-balloon-event/updateBalloon
Body: {"userId":1, "heliumToUse":100}

Get Balloons Info:
GET http://localhost:8080/pop-balloon-event/balloonsInfo?userId=1

Claim Reward:
POST http://localhost:8080/pop-balloon-event/claimReward
Body: {"userId":1}



Request 1: Create User A
POST http://localhost:8080/users
Body: {}
Tests: Extract userId from response and store in a Postman environment variable userAId.

Request 2: Create User B
POST http://localhost:8080/users
Body: {}
Tests: Extract userId from response and store in a Postman environment variable userBId.

Request 3: Level Up User A to Level 50
We can run a test script that hits POST /users/updateLevel multiple times. Or do it manually a few times:
POST http://localhost:8080/users/updateLevel
Body: {"userId":{{userAId}},"joinedPopTheBalloonEvent":false}
Send this request ~49 times (or write a Postman pre-request script to run a loop) until level = 50. A simpler approach: run it ~5 times and manually set user’s level to 50 in DB for demonstration purposes. In a real scenario, just run it enough times.
No environment variables needed, just ensures userA now has level >= 50 and enough coins.

Request 4: Join Event with User A
POST http://localhost:8080/pop-balloon-event/join?userId={{userAId}}
Check that it returns 200 OK. Now User A is participating in today’s event.

Request 5: Level Up User B to Level 50
Same as for User A, run updateLevel multiple times until User B reaches level 50.

Request 6: Join Event with User B
POST http://localhost:8080/pop-balloon-event/join?userId={{userBId}}

Request 7: Get Suggestions for User A
GET http://localhost:8080/pop-balloon-event/suggestions-and-invitations?userId={{userAId}}
Check suggestedUserIds includes {{userBId}} since they’re now eligible (same A/B group assumed). If not same group, create User B until it gets an AbGroup that matches User A.

Request 8: Invite Partner
POST http://localhost:8080/pop-balloon-event/invite
Body: {"inviterUserId":{{userAId}}, "inviteeUserId":{{userBId}}}
Check for 200 OK.

Request 9: Get Suggestions and Invitations for User B
GET http://localhost:8080/pop-balloon-event/suggestions-and-invitations?userId={{userBId}}
Check pendingInvitations. Extract the invitationId of A’s invitation to B into {{invitationId}}.

Request 10: Accept Invitation by User B
POST http://localhost:8080/pop-balloon-event/accept
Body: {"invitationId":{{invitationId}}, "userId":{{userBId}}}
Check for 200 OK.

Request 11: Increase Helium by Leveling Up User A and B
Now that both are partnered, each time they call updateLevel with joinedPopTheBalloonEvent = true, helium goes up by 10.
POST /users/updateLevel
Body: {"userId":{{userAId}}, "joinedPopTheBalloonEvent":true} run this multiple times until helium ~1000+
Do the same for user B.

Request 12: Inflate Balloon Using User A
POST http://localhost:8080/pop-balloon-event/updateBalloon
Body: {"userId":{{userAId}}, "heliumToUse":1000} (if AB group A, 1000 pops balloon, if B then 1500)
Check response popped=true.

Request 13: Claim Reward
POST http://localhost:8080/pop-balloon-event/claimReward
Body: {"userId":{{userAId}}}
Check the user’s coins increased by the reward.

POST /users to create a user.
POST /users/updateLevel to update level.
GET /leaderboard to get the top 100 leaderboard.
